syntax = 'proto3';
package gooseai;
option go_package = "./;generation";

enum ArtifactType {
  ARTIFACT_NONE = 0;
  ARTIFACT_IMAGE = 1;
  ARTIFACT_VIDEO = 2;
  ARTIFACT_TEXT = 3;
  ARTIFACT_TOKENS = 4;
}

message Token {
  optional string text = 1;
  uint32 id = 2;
}

message Tokens {
  repeated Token tokens = 1;
  optional string tokenizer_id = 2;
}

message Artifact {
  uint64 id = 1;
  ArtifactType type = 2;
  string mime = 3;
  optional string magic = 4;
  oneof data {
    bytes binary = 5;
    string text = 6;
    Tokens tokens = 7;
  }
}

message PromptParameters {
  optional bool init = 1;
  optional float weight = 2;
}

message Prompt {
  optional PromptParameters parameters = 1;
  oneof prompt {
    string text = 2;
    Tokens tokens = 3;
    Artifact artifact = 4;
  }
}

message AnswerMeta {
  optional string gpu_id = 1;
  optional string cpu_id = 2;
  optional string node_id = 3;
  optional string engine_id = 4;
}

message Answer {
  string answer_id = 1;
  string request_id = 2;
  uint64 received = 3;
  uint64 created = 4;
  optional AnswerMeta meta = 6;
  repeated Artifact artifacts = 7;
}

enum DenoiseAlgorithm {
  DENOISE_NONE = 0;
  DENOISE_DDIM = 1;
  DENOISE_DDPM = 2;
}

message ImageParameters {
  optional uint64 height = 1;
  optional uint64 width = 2;
  optional uint64 steps = 3;
  optional uint64 seed = 4;
  optional uint64 num_samples = 5;
  optional float eta = 6;
  optional uint64 sampling_steps = 7;
  optional uint64 latent_channels = 8;
  optional uint64 downsampling_factor = 9;
  optional DenoiseAlgorithm denoise = 10;
}

message Request {
  string engine_id = 1;
  string request_id = 2;
  ArtifactType requested_type = 3;
  repeated Prompt prompt = 4;
  oneof params {
    ImageParameters image = 5;
  }
}

service GenerationService {
  rpc Generate (Request) returns (stream Answer) {};
}