syntax = 'proto3';
package gooseai;
option go_package = "./;transform";

enum BorderMode {
  BORDER_REFLECT = 0;
  BORDER_REPLICATE = 1;
  BORDER_WRAP = 2;
  BORDER_ZERO = 3;
}

enum ColorMatchMode {
  COLOR_MATCH_NONE = 0;
  COLOR_MATCH_HSV = 1;
  COLOR_MATCH_LAB = 2;
  COLOR_MATCH_RGB = 3;
}

enum SamplingMode {
  SAMPLING_BICUBIC = 0;
  SAMPLING_BILINEAR = 1;
  SAMPLING_NEAREST = 2;
}

message ImageReference {
  oneof image {
    string asset_id = 1;
    bytes bytes = 2;
  }
}

message TransformColorMatch {
  ColorMatchMode color_mode = 1;
  ImageReference image = 2;
}

message TransformNoise {
  float amount = 1;
}

message TransformWarp2d {
  BorderMode border_mode = 1;
  float rotate = 2;
  float scale = 3;
  float translate_x = 4;
  float translate_y = 5;
}

message TransformWarp3d {
  BorderMode border_mode = 1;
  SamplingMode sampling_mode = 2;
  float translate_x = 3;
  float translate_y = 4;
  float translate_z = 5;
  float rotate_x = 6;
  float rotate_y = 7;
  float rotate_z = 8;
  float near_plane = 9;
  float far_plane = 10;
  float fov = 11;
  float midas_weight = 12;
}

message TransformWarpFlow {
  ImageReference flow_map = 1;
}

message Transform {
  oneof xform {
    TransformColorMatch color_match = 1;
    TransformNoise noise = 2;
    TransformWarp2d warp2d = 3;
    TransformWarp3d warp3d = 4;
    TransformWarpFlow warp_flow = 5;
  }
}

message Request {
  string request_id = 1;
  ImageReference image = 2;
  repeated Transform transforms = 3;
}

message Result {
  bytes image = 1;
  optional bytes mask = 2;
}

service TransformService {
  rpc Transform (Request) returns (stream Result) {};
}
