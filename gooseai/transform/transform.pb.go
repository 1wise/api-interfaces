// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: transform.proto

package transform

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BorderMode int32

const (
	BorderMode_BORDER_REFLECT   BorderMode = 0
	BorderMode_BORDER_REPLICATE BorderMode = 1
	BorderMode_BORDER_WRAP      BorderMode = 2
	BorderMode_BORDER_ZERO      BorderMode = 3
)

// Enum value maps for BorderMode.
var (
	BorderMode_name = map[int32]string{
		0: "BORDER_REFLECT",
		1: "BORDER_REPLICATE",
		2: "BORDER_WRAP",
		3: "BORDER_ZERO",
	}
	BorderMode_value = map[string]int32{
		"BORDER_REFLECT":   0,
		"BORDER_REPLICATE": 1,
		"BORDER_WRAP":      2,
		"BORDER_ZERO":      3,
	}
)

func (x BorderMode) Enum() *BorderMode {
	p := new(BorderMode)
	*p = x
	return p
}

func (x BorderMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BorderMode) Descriptor() protoreflect.EnumDescriptor {
	return file_transform_proto_enumTypes[0].Descriptor()
}

func (BorderMode) Type() protoreflect.EnumType {
	return &file_transform_proto_enumTypes[0]
}

func (x BorderMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BorderMode.Descriptor instead.
func (BorderMode) EnumDescriptor() ([]byte, []int) {
	return file_transform_proto_rawDescGZIP(), []int{0}
}

type ColorMatchMode int32

const (
	ColorMatchMode_COLOR_MATCH_NONE ColorMatchMode = 0
	ColorMatchMode_COLOR_MATCH_HSV  ColorMatchMode = 1
	ColorMatchMode_COLOR_MATCH_LAB  ColorMatchMode = 2
	ColorMatchMode_COLOR_MATCH_RGB  ColorMatchMode = 3
)

// Enum value maps for ColorMatchMode.
var (
	ColorMatchMode_name = map[int32]string{
		0: "COLOR_MATCH_NONE",
		1: "COLOR_MATCH_HSV",
		2: "COLOR_MATCH_LAB",
		3: "COLOR_MATCH_RGB",
	}
	ColorMatchMode_value = map[string]int32{
		"COLOR_MATCH_NONE": 0,
		"COLOR_MATCH_HSV":  1,
		"COLOR_MATCH_LAB":  2,
		"COLOR_MATCH_RGB":  3,
	}
)

func (x ColorMatchMode) Enum() *ColorMatchMode {
	p := new(ColorMatchMode)
	*p = x
	return p
}

func (x ColorMatchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorMatchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_transform_proto_enumTypes[1].Descriptor()
}

func (ColorMatchMode) Type() protoreflect.EnumType {
	return &file_transform_proto_enumTypes[1]
}

func (x ColorMatchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorMatchMode.Descriptor instead.
func (ColorMatchMode) EnumDescriptor() ([]byte, []int) {
	return file_transform_proto_rawDescGZIP(), []int{1}
}

type SamplingMode int32

const (
	SamplingMode_SAMPLING_BICUBIC  SamplingMode = 0
	SamplingMode_SAMPLING_BILINEAR SamplingMode = 1
	SamplingMode_SAMPLING_NEAREST  SamplingMode = 2
)

// Enum value maps for SamplingMode.
var (
	SamplingMode_name = map[int32]string{
		0: "SAMPLING_BICUBIC",
		1: "SAMPLING_BILINEAR",
		2: "SAMPLING_NEAREST",
	}
	SamplingMode_value = map[string]int32{
		"SAMPLING_BICUBIC":  0,
		"SAMPLING_BILINEAR": 1,
		"SAMPLING_NEAREST":  2,
	}
)

func (x SamplingMode) Enum() *SamplingMode {
	p := new(SamplingMode)
	*p = x
	return p
}

func (x SamplingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SamplingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_transform_proto_enumTypes[2].Descriptor()
}

func (SamplingMode) Type() protoreflect.EnumType {
	return &file_transform_proto_enumTypes[2]
}

func (x SamplingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SamplingMode.Descriptor instead.
func (SamplingMode) EnumDescriptor() ([]byte, []int) {
	return file_transform_proto_rawDescGZIP(), []int{2}
}

type ImageReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Image:
	//
	//	*ImageReference_AssetId
	//	*ImageReference_Bytes
	Image isImageReference_Image `protobuf_oneof:"image"`
}

func (x *ImageReference) Reset() {
	*x = ImageReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageReference) ProtoMessage() {}

func (x *ImageReference) ProtoReflect() protoreflect.Message {
	mi := &file_transform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageReference.ProtoReflect.Descriptor instead.
func (*ImageReference) Descriptor() ([]byte, []int) {
	return file_transform_proto_rawDescGZIP(), []int{0}
}

func (m *ImageReference) GetImage() isImageReference_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (x *ImageReference) GetAssetId() string {
	if x, ok := x.GetImage().(*ImageReference_AssetId); ok {
		return x.AssetId
	}
	return ""
}

func (x *ImageReference) GetBytes() []byte {
	if x, ok := x.GetImage().(*ImageReference_Bytes); ok {
		return x.Bytes
	}
	return nil
}

type isImageReference_Image interface {
	isImageReference_Image()
}

type ImageReference_AssetId struct {
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type ImageReference_Bytes struct {
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3,oneof"`
}

func (*ImageReference_AssetId) isImageReference_Image() {}

func (*ImageReference_Bytes) isImageReference_Image() {}

type TransformColorMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorMode ColorMatchMode  `protobuf:"varint,1,opt,name=color_mode,json=colorMode,proto3,enum=gooseai.ColorMatchMode" json:"color_mode,omitempty"`
	Image     *ImageReference `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *TransformColorMatch) Reset() {
	*x = TransformColorMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformColorMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformColorMatch) ProtoMessage() {}

func (x *TransformColorMatch) ProtoReflect() protoreflect.Message {
	mi := &file_transform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformColorMatch.ProtoReflect.Descriptor instead.
func (*TransformColorMatch) Descriptor() ([]byte, []int) {
	return file_transform_proto_rawDescGZIP(), []int{1}
}

func (x *TransformColorMatch) GetColorMode() ColorMatchMode {
	if x != nil {
		return x.ColorMode
	}
	return ColorMatchMode_COLOR_MATCH_NONE
}

func (x *TransformColorMatch) GetImage() *ImageReference {
	if x != nil {
		return x.Image
	}
	return nil
}

type TransformNoise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount float32 `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TransformNoise) Reset() {
	*x = TransformNoise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformNoise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformNoise) ProtoMessage() {}

func (x *TransformNoise) ProtoReflect() protoreflect.Message {
	mi := &file_transform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformNoise.ProtoReflect.Descriptor instead.
func (*TransformNoise) Descriptor() ([]byte, []int) {
	return file_transform_proto_rawDescGZIP(), []int{2}
}

func (x *TransformNoise) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TransformWarp2D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BorderMode BorderMode `protobuf:"varint,1,opt,name=border_mode,json=borderMode,proto3,enum=gooseai.BorderMode" json:"border_mode,omitempty"`
	Rotate     float32    `protobuf:"fixed32,2,opt,name=rotate,proto3" json:"rotate,omitempty"`
	Scale      float32    `protobuf:"fixed32,3,opt,name=scale,proto3" json:"scale,omitempty"`
	TranslateX float32    `protobuf:"fixed32,4,opt,name=translate_x,json=translateX,proto3" json:"translate_x,omitempty"`
	TranslateY float32    `protobuf:"fixed32,5,opt,name=translate_y,json=translateY,proto3" json:"translate_y,omitempty"`
}

func (x *TransformWarp2D) Reset() {
	*x = TransformWarp2D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformWarp2D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformWarp2D) ProtoMessage() {}

func (x *TransformWarp2D) ProtoReflect() protoreflect.Message {
	mi := &file_transform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformWarp2D.ProtoReflect.Descriptor instead.
func (*TransformWarp2D) Descriptor() ([]byte, []int) {
	return file_transform_proto_rawDescGZIP(), []int{3}
}

func (x *TransformWarp2D) GetBorderMode() BorderMode {
	if x != nil {
		return x.BorderMode
	}
	return BorderMode_BORDER_REFLECT
}

func (x *TransformWarp2D) GetRotate() float32 {
	if x != nil {
		return x.Rotate
	}
	return 0
}

func (x *TransformWarp2D) GetScale() float32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *TransformWarp2D) GetTranslateX() float32 {
	if x != nil {
		return x.TranslateX
	}
	return 0
}

func (x *TransformWarp2D) GetTranslateY() float32 {
	if x != nil {
		return x.TranslateY
	}
	return 0
}

type TransformWarp3D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BorderMode   BorderMode   `protobuf:"varint,1,opt,name=border_mode,json=borderMode,proto3,enum=gooseai.BorderMode" json:"border_mode,omitempty"`
	SamplingMode SamplingMode `protobuf:"varint,2,opt,name=sampling_mode,json=samplingMode,proto3,enum=gooseai.SamplingMode" json:"sampling_mode,omitempty"`
	TranslateX   float32      `protobuf:"fixed32,3,opt,name=translate_x,json=translateX,proto3" json:"translate_x,omitempty"`
	TranslateY   float32      `protobuf:"fixed32,4,opt,name=translate_y,json=translateY,proto3" json:"translate_y,omitempty"`
	TranslateZ   float32      `protobuf:"fixed32,5,opt,name=translate_z,json=translateZ,proto3" json:"translate_z,omitempty"`
	RotateX      float32      `protobuf:"fixed32,6,opt,name=rotate_x,json=rotateX,proto3" json:"rotate_x,omitempty"`
	RotateY      float32      `protobuf:"fixed32,7,opt,name=rotate_y,json=rotateY,proto3" json:"rotate_y,omitempty"`
	RotateZ      float32      `protobuf:"fixed32,8,opt,name=rotate_z,json=rotateZ,proto3" json:"rotate_z,omitempty"`
	NearPlane    float32      `protobuf:"fixed32,9,opt,name=near_plane,json=nearPlane,proto3" json:"near_plane,omitempty"`
	FarPlane     float32      `protobuf:"fixed32,10,opt,name=far_plane,json=farPlane,proto3" json:"far_plane,omitempty"`
	Fov          float32      `protobuf:"fixed32,11,opt,name=fov,proto3" json:"fov,omitempty"`
	MidasWeight  float32      `protobuf:"fixed32,12,opt,name=midas_weight,json=midasWeight,proto3" json:"midas_weight,omitempty"`
}

func (x *TransformWarp3D) Reset() {
	*x = TransformWarp3D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformWarp3D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformWarp3D) ProtoMessage() {}

func (x *TransformWarp3D) ProtoReflect() protoreflect.Message {
	mi := &file_transform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformWarp3D.ProtoReflect.Descriptor instead.
func (*TransformWarp3D) Descriptor() ([]byte, []int) {
	return file_transform_proto_rawDescGZIP(), []int{4}
}

func (x *TransformWarp3D) GetBorderMode() BorderMode {
	if x != nil {
		return x.BorderMode
	}
	return BorderMode_BORDER_REFLECT
}

func (x *TransformWarp3D) GetSamplingMode() SamplingMode {
	if x != nil {
		return x.SamplingMode
	}
	return SamplingMode_SAMPLING_BICUBIC
}

func (x *TransformWarp3D) GetTranslateX() float32 {
	if x != nil {
		return x.TranslateX
	}
	return 0
}

func (x *TransformWarp3D) GetTranslateY() float32 {
	if x != nil {
		return x.TranslateY
	}
	return 0
}

func (x *TransformWarp3D) GetTranslateZ() float32 {
	if x != nil {
		return x.TranslateZ
	}
	return 0
}

func (x *TransformWarp3D) GetRotateX() float32 {
	if x != nil {
		return x.RotateX
	}
	return 0
}

func (x *TransformWarp3D) GetRotateY() float32 {
	if x != nil {
		return x.RotateY
	}
	return 0
}

func (x *TransformWarp3D) GetRotateZ() float32 {
	if x != nil {
		return x.RotateZ
	}
	return 0
}

func (x *TransformWarp3D) GetNearPlane() float32 {
	if x != nil {
		return x.NearPlane
	}
	return 0
}

func (x *TransformWarp3D) GetFarPlane() float32 {
	if x != nil {
		return x.FarPlane
	}
	return 0
}

func (x *TransformWarp3D) GetFov() float32 {
	if x != nil {
		return x.Fov
	}
	return 0
}

func (x *TransformWarp3D) GetMidasWeight() float32 {
	if x != nil {
		return x.MidasWeight
	}
	return 0
}

type TransformWarpFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowMap *ImageReference `protobuf:"bytes,1,opt,name=flow_map,json=flowMap,proto3" json:"flow_map,omitempty"`
}

func (x *TransformWarpFlow) Reset() {
	*x = TransformWarpFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformWarpFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformWarpFlow) ProtoMessage() {}

func (x *TransformWarpFlow) ProtoReflect() protoreflect.Message {
	mi := &file_transform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformWarpFlow.ProtoReflect.Descriptor instead.
func (*TransformWarpFlow) Descriptor() ([]byte, []int) {
	return file_transform_proto_rawDescGZIP(), []int{5}
}

func (x *TransformWarpFlow) GetFlowMap() *ImageReference {
	if x != nil {
		return x.FlowMap
	}
	return nil
}

type Transform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Xform:
	//
	//	*Transform_ColorMatch
	//	*Transform_Noise
	//	*Transform_Warp2D
	//	*Transform_Warp3D
	//	*Transform_WarpFlow
	Xform isTransform_Xform `protobuf_oneof:"xform"`
}

func (x *Transform) Reset() {
	*x = Transform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transform) ProtoMessage() {}

func (x *Transform) ProtoReflect() protoreflect.Message {
	mi := &file_transform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transform.ProtoReflect.Descriptor instead.
func (*Transform) Descriptor() ([]byte, []int) {
	return file_transform_proto_rawDescGZIP(), []int{6}
}

func (m *Transform) GetXform() isTransform_Xform {
	if m != nil {
		return m.Xform
	}
	return nil
}

func (x *Transform) GetColorMatch() *TransformColorMatch {
	if x, ok := x.GetXform().(*Transform_ColorMatch); ok {
		return x.ColorMatch
	}
	return nil
}

func (x *Transform) GetNoise() *TransformNoise {
	if x, ok := x.GetXform().(*Transform_Noise); ok {
		return x.Noise
	}
	return nil
}

func (x *Transform) GetWarp2D() *TransformWarp2D {
	if x, ok := x.GetXform().(*Transform_Warp2D); ok {
		return x.Warp2D
	}
	return nil
}

func (x *Transform) GetWarp3D() *TransformWarp3D {
	if x, ok := x.GetXform().(*Transform_Warp3D); ok {
		return x.Warp3D
	}
	return nil
}

func (x *Transform) GetWarpFlow() *TransformWarpFlow {
	if x, ok := x.GetXform().(*Transform_WarpFlow); ok {
		return x.WarpFlow
	}
	return nil
}

type isTransform_Xform interface {
	isTransform_Xform()
}

type Transform_ColorMatch struct {
	ColorMatch *TransformColorMatch `protobuf:"bytes,1,opt,name=color_match,json=colorMatch,proto3,oneof"`
}

type Transform_Noise struct {
	Noise *TransformNoise `protobuf:"bytes,2,opt,name=noise,proto3,oneof"`
}

type Transform_Warp2D struct {
	Warp2D *TransformWarp2D `protobuf:"bytes,3,opt,name=warp2d,proto3,oneof"`
}

type Transform_Warp3D struct {
	Warp3D *TransformWarp3D `protobuf:"bytes,4,opt,name=warp3d,proto3,oneof"`
}

type Transform_WarpFlow struct {
	WarpFlow *TransformWarpFlow `protobuf:"bytes,5,opt,name=warp_flow,json=warpFlow,proto3,oneof"`
}

func (*Transform_ColorMatch) isTransform_Xform() {}

func (*Transform_Noise) isTransform_Xform() {}

func (*Transform_Warp2D) isTransform_Xform() {}

func (*Transform_Warp3D) isTransform_Xform() {}

func (*Transform_WarpFlow) isTransform_Xform() {}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string          `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Image      *ImageReference `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Transforms []*Transform    `protobuf:"bytes,3,rep,name=transforms,proto3" json:"transforms,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_transform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_transform_proto_rawDescGZIP(), []int{7}
}

func (x *Request) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Request) GetImage() *ImageReference {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Request) GetTransforms() []*Transform {
	if x != nil {
		return x.Transforms
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Mask  []byte `protobuf:"bytes,2,opt,name=mask,proto3,oneof" json:"mask,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transform_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_transform_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_transform_proto_rawDescGZIP(), []int{8}
}

func (x *Result) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Result) GetMask() []byte {
	if x != nil {
		return x.Mask
	}
	return nil
}

var File_transform_proto protoreflect.FileDescriptor

var file_transform_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x22, 0x4e, 0x0a, 0x0e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x13, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65,
	0x61, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x57, 0x61, 0x72, 0x70, 0x32, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x58, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x59, 0x22, 0xa8, 0x03, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x57, 0x61, 0x72, 0x70, 0x33, 0x64,
	0x12, 0x34, 0x0a, 0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e,
	0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x65, 0x58, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x65, 0x59, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x65, 0x5a, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x58,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x59, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x5a, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6e, 0x65, 0x61, 0x72,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x72, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x61, 0x72, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x6f, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x66, 0x6f, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x64, 0x61, 0x73, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x69, 0x64, 0x61,
	0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x47, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x57, 0x61, 0x72, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x08,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70,
	0x22, 0xa9, 0x02, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x2f, 0x0a, 0x05, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x69, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x77, 0x61, 0x72, 0x70, 0x32, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x57, 0x61, 0x72, 0x70, 0x32, 0x64, 0x48, 0x00, 0x52, 0x06, 0x77, 0x61,
	0x72, 0x70, 0x32, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x77, 0x61, 0x72, 0x70, 0x33, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x57, 0x61, 0x72, 0x70, 0x33, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x77, 0x61, 0x72, 0x70, 0x33, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x61, 0x72, 0x70,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x57,
	0x61, 0x72, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x08, 0x77, 0x61, 0x72, 0x70, 0x46,
	0x6c, 0x6f, 0x77, 0x42, 0x07, 0x0a, 0x05, 0x78, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x8b, 0x01, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22, 0x40, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2a, 0x58, 0x0a, 0x0a,
	0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x57,
	0x52, 0x41, 0x50, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x5a, 0x45, 0x52, 0x4f, 0x10, 0x03, 0x2a, 0x65, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x48, 0x53,
	0x56, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x4c, 0x41, 0x42, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x47, 0x42, 0x10, 0x03, 0x2a, 0x51, 0x0a,
	0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x49, 0x43, 0x55, 0x42, 0x49,
	0x43, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x42, 0x49, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x41,
	0x4d, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x45, 0x41, 0x52, 0x45, 0x53, 0x54, 0x10, 0x02,
	0x32, 0x46, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x3b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transform_proto_rawDescOnce sync.Once
	file_transform_proto_rawDescData = file_transform_proto_rawDesc
)

func file_transform_proto_rawDescGZIP() []byte {
	file_transform_proto_rawDescOnce.Do(func() {
		file_transform_proto_rawDescData = protoimpl.X.CompressGZIP(file_transform_proto_rawDescData)
	})
	return file_transform_proto_rawDescData
}

var file_transform_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_transform_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_transform_proto_goTypes = []interface{}{
	(BorderMode)(0),             // 0: gooseai.BorderMode
	(ColorMatchMode)(0),         // 1: gooseai.ColorMatchMode
	(SamplingMode)(0),           // 2: gooseai.SamplingMode
	(*ImageReference)(nil),      // 3: gooseai.ImageReference
	(*TransformColorMatch)(nil), // 4: gooseai.TransformColorMatch
	(*TransformNoise)(nil),      // 5: gooseai.TransformNoise
	(*TransformWarp2D)(nil),     // 6: gooseai.TransformWarp2d
	(*TransformWarp3D)(nil),     // 7: gooseai.TransformWarp3d
	(*TransformWarpFlow)(nil),   // 8: gooseai.TransformWarpFlow
	(*Transform)(nil),           // 9: gooseai.Transform
	(*Request)(nil),             // 10: gooseai.Request
	(*Result)(nil),              // 11: gooseai.Result
}
var file_transform_proto_depIdxs = []int32{
	1,  // 0: gooseai.TransformColorMatch.color_mode:type_name -> gooseai.ColorMatchMode
	3,  // 1: gooseai.TransformColorMatch.image:type_name -> gooseai.ImageReference
	0,  // 2: gooseai.TransformWarp2d.border_mode:type_name -> gooseai.BorderMode
	0,  // 3: gooseai.TransformWarp3d.border_mode:type_name -> gooseai.BorderMode
	2,  // 4: gooseai.TransformWarp3d.sampling_mode:type_name -> gooseai.SamplingMode
	3,  // 5: gooseai.TransformWarpFlow.flow_map:type_name -> gooseai.ImageReference
	4,  // 6: gooseai.Transform.color_match:type_name -> gooseai.TransformColorMatch
	5,  // 7: gooseai.Transform.noise:type_name -> gooseai.TransformNoise
	6,  // 8: gooseai.Transform.warp2d:type_name -> gooseai.TransformWarp2d
	7,  // 9: gooseai.Transform.warp3d:type_name -> gooseai.TransformWarp3d
	8,  // 10: gooseai.Transform.warp_flow:type_name -> gooseai.TransformWarpFlow
	3,  // 11: gooseai.Request.image:type_name -> gooseai.ImageReference
	9,  // 12: gooseai.Request.transforms:type_name -> gooseai.Transform
	10, // 13: gooseai.TransformService.Transform:input_type -> gooseai.Request
	11, // 14: gooseai.TransformService.Transform:output_type -> gooseai.Result
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_transform_proto_init() }
func file_transform_proto_init() {
	if File_transform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformColorMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformNoise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformWarp2D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformWarp3D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformWarpFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transform_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transform_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transform_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ImageReference_AssetId)(nil),
		(*ImageReference_Bytes)(nil),
	}
	file_transform_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Transform_ColorMatch)(nil),
		(*Transform_Noise)(nil),
		(*Transform_Warp2D)(nil),
		(*Transform_Warp3D)(nil),
		(*Transform_WarpFlow)(nil),
	}
	file_transform_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transform_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transform_proto_goTypes,
		DependencyIndexes: file_transform_proto_depIdxs,
		EnumInfos:         file_transform_proto_enumTypes,
		MessageInfos:      file_transform_proto_msgTypes,
	}.Build()
	File_transform_proto = out.File
	file_transform_proto_rawDesc = nil
	file_transform_proto_goTypes = nil
	file_transform_proto_depIdxs = nil
}
