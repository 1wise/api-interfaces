// source: transform.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.gooseai.BorderMode', null, global);
goog.exportSymbol('proto.gooseai.ColorMatchMode', null, global);
goog.exportSymbol('proto.gooseai.ImageReference', null, global);
goog.exportSymbol('proto.gooseai.ImageReference.ImageCase', null, global);
goog.exportSymbol('proto.gooseai.Request', null, global);
goog.exportSymbol('proto.gooseai.Result', null, global);
goog.exportSymbol('proto.gooseai.SamplingMode', null, global);
goog.exportSymbol('proto.gooseai.Transform', null, global);
goog.exportSymbol('proto.gooseai.Transform.XformCase', null, global);
goog.exportSymbol('proto.gooseai.TransformColorMatch', null, global);
goog.exportSymbol('proto.gooseai.TransformNoise', null, global);
goog.exportSymbol('proto.gooseai.TransformWarp2d', null, global);
goog.exportSymbol('proto.gooseai.TransformWarp3d', null, global);
goog.exportSymbol('proto.gooseai.TransformWarpFlow', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.ImageReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gooseai.ImageReference.oneofGroups_);
};
goog.inherits(proto.gooseai.ImageReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.ImageReference.displayName = 'proto.gooseai.ImageReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.TransformColorMatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.TransformColorMatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.TransformColorMatch.displayName = 'proto.gooseai.TransformColorMatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.TransformNoise = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.TransformNoise, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.TransformNoise.displayName = 'proto.gooseai.TransformNoise';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.TransformWarp2d = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.TransformWarp2d, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.TransformWarp2d.displayName = 'proto.gooseai.TransformWarp2d';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.TransformWarp3d = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.TransformWarp3d, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.TransformWarp3d.displayName = 'proto.gooseai.TransformWarp3d';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.TransformWarpFlow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.TransformWarpFlow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.TransformWarpFlow.displayName = 'proto.gooseai.TransformWarpFlow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.Transform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gooseai.Transform.oneofGroups_);
};
goog.inherits(proto.gooseai.Transform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.Transform.displayName = 'proto.gooseai.Transform';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gooseai.Request.repeatedFields_, null);
};
goog.inherits(proto.gooseai.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.Request.displayName = 'proto.gooseai.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gooseai.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gooseai.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gooseai.Result.displayName = 'proto.gooseai.Result';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gooseai.ImageReference.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.gooseai.ImageReference.ImageCase = {
  IMAGE_NOT_SET: 0,
  ASSET_ID: 1,
  BYTES: 2
};

/**
 * @return {proto.gooseai.ImageReference.ImageCase}
 */
proto.gooseai.ImageReference.prototype.getImageCase = function() {
  return /** @type {proto.gooseai.ImageReference.ImageCase} */(jspb.Message.computeOneofCase(this, proto.gooseai.ImageReference.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.ImageReference.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.ImageReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.ImageReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ImageReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.ImageReference}
 */
proto.gooseai.ImageReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.ImageReference;
  return proto.gooseai.ImageReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.ImageReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.ImageReference}
 */
proto.gooseai.ImageReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.ImageReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.ImageReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.ImageReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.ImageReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string asset_id = 1;
 * @return {string}
 */
proto.gooseai.ImageReference.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.ImageReference} returns this
 */
proto.gooseai.ImageReference.prototype.setAssetId = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.gooseai.ImageReference.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ImageReference} returns this
 */
proto.gooseai.ImageReference.prototype.clearAssetId = function() {
  return jspb.Message.setOneofField(this, 1, proto.gooseai.ImageReference.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ImageReference.prototype.hasAssetId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes bytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gooseai.ImageReference.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes bytes = 2;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.gooseai.ImageReference.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.gooseai.ImageReference.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gooseai.ImageReference} returns this
 */
proto.gooseai.ImageReference.prototype.setBytes = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.gooseai.ImageReference.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.ImageReference} returns this
 */
proto.gooseai.ImageReference.prototype.clearBytes = function() {
  return jspb.Message.setOneofField(this, 2, proto.gooseai.ImageReference.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.ImageReference.prototype.hasBytes = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.TransformColorMatch.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.TransformColorMatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.TransformColorMatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.TransformColorMatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    colorMode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    image: (f = msg.getImage()) && proto.gooseai.ImageReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.TransformColorMatch}
 */
proto.gooseai.TransformColorMatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.TransformColorMatch;
  return proto.gooseai.TransformColorMatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.TransformColorMatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.TransformColorMatch}
 */
proto.gooseai.TransformColorMatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gooseai.ColorMatchMode} */ (reader.readEnum());
      msg.setColorMode(value);
      break;
    case 2:
      var value = new proto.gooseai.ImageReference;
      reader.readMessage(value,proto.gooseai.ImageReference.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.TransformColorMatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.TransformColorMatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.TransformColorMatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.TransformColorMatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColorMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gooseai.ImageReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional ColorMatchMode color_mode = 1;
 * @return {!proto.gooseai.ColorMatchMode}
 */
proto.gooseai.TransformColorMatch.prototype.getColorMode = function() {
  return /** @type {!proto.gooseai.ColorMatchMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.gooseai.ColorMatchMode} value
 * @return {!proto.gooseai.TransformColorMatch} returns this
 */
proto.gooseai.TransformColorMatch.prototype.setColorMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ImageReference image = 2;
 * @return {?proto.gooseai.ImageReference}
 */
proto.gooseai.TransformColorMatch.prototype.getImage = function() {
  return /** @type{?proto.gooseai.ImageReference} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.ImageReference, 2));
};


/**
 * @param {?proto.gooseai.ImageReference|undefined} value
 * @return {!proto.gooseai.TransformColorMatch} returns this
*/
proto.gooseai.TransformColorMatch.prototype.setImage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.TransformColorMatch} returns this
 */
proto.gooseai.TransformColorMatch.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.TransformColorMatch.prototype.hasImage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.TransformNoise.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.TransformNoise.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.TransformNoise} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.TransformNoise.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.TransformNoise}
 */
proto.gooseai.TransformNoise.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.TransformNoise;
  return proto.gooseai.TransformNoise.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.TransformNoise} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.TransformNoise}
 */
proto.gooseai.TransformNoise.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.TransformNoise.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.TransformNoise.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.TransformNoise} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.TransformNoise.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float amount = 1;
 * @return {number}
 */
proto.gooseai.TransformNoise.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformNoise} returns this
 */
proto.gooseai.TransformNoise.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.TransformWarp2d.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.TransformWarp2d.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.TransformWarp2d} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.TransformWarp2d.toObject = function(includeInstance, msg) {
  var f, obj = {
    borderMode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rotate: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    scale: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    translateX: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    translateY: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.TransformWarp2d}
 */
proto.gooseai.TransformWarp2d.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.TransformWarp2d;
  return proto.gooseai.TransformWarp2d.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.TransformWarp2d} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.TransformWarp2d}
 */
proto.gooseai.TransformWarp2d.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gooseai.BorderMode} */ (reader.readEnum());
      msg.setBorderMode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTranslateX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTranslateY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.TransformWarp2d.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.TransformWarp2d.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.TransformWarp2d} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.TransformWarp2d.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBorderMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRotate();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getScale();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getTranslateX();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getTranslateY();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional BorderMode border_mode = 1;
 * @return {!proto.gooseai.BorderMode}
 */
proto.gooseai.TransformWarp2d.prototype.getBorderMode = function() {
  return /** @type {!proto.gooseai.BorderMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.gooseai.BorderMode} value
 * @return {!proto.gooseai.TransformWarp2d} returns this
 */
proto.gooseai.TransformWarp2d.prototype.setBorderMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float rotate = 2;
 * @return {number}
 */
proto.gooseai.TransformWarp2d.prototype.getRotate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp2d} returns this
 */
proto.gooseai.TransformWarp2d.prototype.setRotate = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float scale = 3;
 * @return {number}
 */
proto.gooseai.TransformWarp2d.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp2d} returns this
 */
proto.gooseai.TransformWarp2d.prototype.setScale = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float translate_x = 4;
 * @return {number}
 */
proto.gooseai.TransformWarp2d.prototype.getTranslateX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp2d} returns this
 */
proto.gooseai.TransformWarp2d.prototype.setTranslateX = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float translate_y = 5;
 * @return {number}
 */
proto.gooseai.TransformWarp2d.prototype.getTranslateY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp2d} returns this
 */
proto.gooseai.TransformWarp2d.prototype.setTranslateY = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.TransformWarp3d.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.TransformWarp3d.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.TransformWarp3d} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.TransformWarp3d.toObject = function(includeInstance, msg) {
  var f, obj = {
    borderMode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    samplingMode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    translateX: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    translateY: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    translateZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    rotateX: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    rotateY: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    rotateZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    nearPlane: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    farPlane: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    fov: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    midasWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.TransformWarp3d}
 */
proto.gooseai.TransformWarp3d.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.TransformWarp3d;
  return proto.gooseai.TransformWarp3d.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.TransformWarp3d} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.TransformWarp3d}
 */
proto.gooseai.TransformWarp3d.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gooseai.BorderMode} */ (reader.readEnum());
      msg.setBorderMode(value);
      break;
    case 2:
      var value = /** @type {!proto.gooseai.SamplingMode} */ (reader.readEnum());
      msg.setSamplingMode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTranslateX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTranslateY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTranslateZ(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotateX(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotateY(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotateZ(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNearPlane(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFarPlane(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFov(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMidasWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.TransformWarp3d.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.TransformWarp3d.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.TransformWarp3d} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.TransformWarp3d.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBorderMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSamplingMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTranslateX();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getTranslateY();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getTranslateZ();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getRotateX();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getRotateY();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getRotateZ();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getNearPlane();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getFarPlane();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getFov();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getMidasWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
};


/**
 * optional BorderMode border_mode = 1;
 * @return {!proto.gooseai.BorderMode}
 */
proto.gooseai.TransformWarp3d.prototype.getBorderMode = function() {
  return /** @type {!proto.gooseai.BorderMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.gooseai.BorderMode} value
 * @return {!proto.gooseai.TransformWarp3d} returns this
 */
proto.gooseai.TransformWarp3d.prototype.setBorderMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SamplingMode sampling_mode = 2;
 * @return {!proto.gooseai.SamplingMode}
 */
proto.gooseai.TransformWarp3d.prototype.getSamplingMode = function() {
  return /** @type {!proto.gooseai.SamplingMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.gooseai.SamplingMode} value
 * @return {!proto.gooseai.TransformWarp3d} returns this
 */
proto.gooseai.TransformWarp3d.prototype.setSamplingMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional float translate_x = 3;
 * @return {number}
 */
proto.gooseai.TransformWarp3d.prototype.getTranslateX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp3d} returns this
 */
proto.gooseai.TransformWarp3d.prototype.setTranslateX = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float translate_y = 4;
 * @return {number}
 */
proto.gooseai.TransformWarp3d.prototype.getTranslateY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp3d} returns this
 */
proto.gooseai.TransformWarp3d.prototype.setTranslateY = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float translate_z = 5;
 * @return {number}
 */
proto.gooseai.TransformWarp3d.prototype.getTranslateZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp3d} returns this
 */
proto.gooseai.TransformWarp3d.prototype.setTranslateZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float rotate_x = 6;
 * @return {number}
 */
proto.gooseai.TransformWarp3d.prototype.getRotateX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp3d} returns this
 */
proto.gooseai.TransformWarp3d.prototype.setRotateX = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float rotate_y = 7;
 * @return {number}
 */
proto.gooseai.TransformWarp3d.prototype.getRotateY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp3d} returns this
 */
proto.gooseai.TransformWarp3d.prototype.setRotateY = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float rotate_z = 8;
 * @return {number}
 */
proto.gooseai.TransformWarp3d.prototype.getRotateZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp3d} returns this
 */
proto.gooseai.TransformWarp3d.prototype.setRotateZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float near_plane = 9;
 * @return {number}
 */
proto.gooseai.TransformWarp3d.prototype.getNearPlane = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp3d} returns this
 */
proto.gooseai.TransformWarp3d.prototype.setNearPlane = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float far_plane = 10;
 * @return {number}
 */
proto.gooseai.TransformWarp3d.prototype.getFarPlane = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp3d} returns this
 */
proto.gooseai.TransformWarp3d.prototype.setFarPlane = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float fov = 11;
 * @return {number}
 */
proto.gooseai.TransformWarp3d.prototype.getFov = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp3d} returns this
 */
proto.gooseai.TransformWarp3d.prototype.setFov = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float midas_weight = 12;
 * @return {number}
 */
proto.gooseai.TransformWarp3d.prototype.getMidasWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gooseai.TransformWarp3d} returns this
 */
proto.gooseai.TransformWarp3d.prototype.setMidasWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.TransformWarpFlow.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.TransformWarpFlow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.TransformWarpFlow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.TransformWarpFlow.toObject = function(includeInstance, msg) {
  var f, obj = {
    flowMap: (f = msg.getFlowMap()) && proto.gooseai.ImageReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.TransformWarpFlow}
 */
proto.gooseai.TransformWarpFlow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.TransformWarpFlow;
  return proto.gooseai.TransformWarpFlow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.TransformWarpFlow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.TransformWarpFlow}
 */
proto.gooseai.TransformWarpFlow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gooseai.ImageReference;
      reader.readMessage(value,proto.gooseai.ImageReference.deserializeBinaryFromReader);
      msg.setFlowMap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.TransformWarpFlow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.TransformWarpFlow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.TransformWarpFlow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.TransformWarpFlow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlowMap();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gooseai.ImageReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional ImageReference flow_map = 1;
 * @return {?proto.gooseai.ImageReference}
 */
proto.gooseai.TransformWarpFlow.prototype.getFlowMap = function() {
  return /** @type{?proto.gooseai.ImageReference} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.ImageReference, 1));
};


/**
 * @param {?proto.gooseai.ImageReference|undefined} value
 * @return {!proto.gooseai.TransformWarpFlow} returns this
*/
proto.gooseai.TransformWarpFlow.prototype.setFlowMap = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.TransformWarpFlow} returns this
 */
proto.gooseai.TransformWarpFlow.prototype.clearFlowMap = function() {
  return this.setFlowMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.TransformWarpFlow.prototype.hasFlowMap = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gooseai.Transform.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.gooseai.Transform.XformCase = {
  XFORM_NOT_SET: 0,
  COLOR_MATCH: 1,
  NOISE: 2,
  WARP2D: 3,
  WARP3D: 4,
  WARP_FLOW: 5
};

/**
 * @return {proto.gooseai.Transform.XformCase}
 */
proto.gooseai.Transform.prototype.getXformCase = function() {
  return /** @type {proto.gooseai.Transform.XformCase} */(jspb.Message.computeOneofCase(this, proto.gooseai.Transform.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.Transform.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.Transform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.Transform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Transform.toObject = function(includeInstance, msg) {
  var f, obj = {
    colorMatch: (f = msg.getColorMatch()) && proto.gooseai.TransformColorMatch.toObject(includeInstance, f),
    noise: (f = msg.getNoise()) && proto.gooseai.TransformNoise.toObject(includeInstance, f),
    warp2d: (f = msg.getWarp2d()) && proto.gooseai.TransformWarp2d.toObject(includeInstance, f),
    warp3d: (f = msg.getWarp3d()) && proto.gooseai.TransformWarp3d.toObject(includeInstance, f),
    warpFlow: (f = msg.getWarpFlow()) && proto.gooseai.TransformWarpFlow.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.Transform}
 */
proto.gooseai.Transform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.Transform;
  return proto.gooseai.Transform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.Transform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.Transform}
 */
proto.gooseai.Transform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gooseai.TransformColorMatch;
      reader.readMessage(value,proto.gooseai.TransformColorMatch.deserializeBinaryFromReader);
      msg.setColorMatch(value);
      break;
    case 2:
      var value = new proto.gooseai.TransformNoise;
      reader.readMessage(value,proto.gooseai.TransformNoise.deserializeBinaryFromReader);
      msg.setNoise(value);
      break;
    case 3:
      var value = new proto.gooseai.TransformWarp2d;
      reader.readMessage(value,proto.gooseai.TransformWarp2d.deserializeBinaryFromReader);
      msg.setWarp2d(value);
      break;
    case 4:
      var value = new proto.gooseai.TransformWarp3d;
      reader.readMessage(value,proto.gooseai.TransformWarp3d.deserializeBinaryFromReader);
      msg.setWarp3d(value);
      break;
    case 5:
      var value = new proto.gooseai.TransformWarpFlow;
      reader.readMessage(value,proto.gooseai.TransformWarpFlow.deserializeBinaryFromReader);
      msg.setWarpFlow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.Transform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.Transform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.Transform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Transform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColorMatch();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gooseai.TransformColorMatch.serializeBinaryToWriter
    );
  }
  f = message.getNoise();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gooseai.TransformNoise.serializeBinaryToWriter
    );
  }
  f = message.getWarp2d();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gooseai.TransformWarp2d.serializeBinaryToWriter
    );
  }
  f = message.getWarp3d();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.gooseai.TransformWarp3d.serializeBinaryToWriter
    );
  }
  f = message.getWarpFlow();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.gooseai.TransformWarpFlow.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransformColorMatch color_match = 1;
 * @return {?proto.gooseai.TransformColorMatch}
 */
proto.gooseai.Transform.prototype.getColorMatch = function() {
  return /** @type{?proto.gooseai.TransformColorMatch} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.TransformColorMatch, 1));
};


/**
 * @param {?proto.gooseai.TransformColorMatch|undefined} value
 * @return {!proto.gooseai.Transform} returns this
*/
proto.gooseai.Transform.prototype.setColorMatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.gooseai.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Transform} returns this
 */
proto.gooseai.Transform.prototype.clearColorMatch = function() {
  return this.setColorMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Transform.prototype.hasColorMatch = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransformNoise noise = 2;
 * @return {?proto.gooseai.TransformNoise}
 */
proto.gooseai.Transform.prototype.getNoise = function() {
  return /** @type{?proto.gooseai.TransformNoise} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.TransformNoise, 2));
};


/**
 * @param {?proto.gooseai.TransformNoise|undefined} value
 * @return {!proto.gooseai.Transform} returns this
*/
proto.gooseai.Transform.prototype.setNoise = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.gooseai.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Transform} returns this
 */
proto.gooseai.Transform.prototype.clearNoise = function() {
  return this.setNoise(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Transform.prototype.hasNoise = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TransformWarp2d warp2d = 3;
 * @return {?proto.gooseai.TransformWarp2d}
 */
proto.gooseai.Transform.prototype.getWarp2d = function() {
  return /** @type{?proto.gooseai.TransformWarp2d} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.TransformWarp2d, 3));
};


/**
 * @param {?proto.gooseai.TransformWarp2d|undefined} value
 * @return {!proto.gooseai.Transform} returns this
*/
proto.gooseai.Transform.prototype.setWarp2d = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.gooseai.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Transform} returns this
 */
proto.gooseai.Transform.prototype.clearWarp2d = function() {
  return this.setWarp2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Transform.prototype.hasWarp2d = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TransformWarp3d warp3d = 4;
 * @return {?proto.gooseai.TransformWarp3d}
 */
proto.gooseai.Transform.prototype.getWarp3d = function() {
  return /** @type{?proto.gooseai.TransformWarp3d} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.TransformWarp3d, 4));
};


/**
 * @param {?proto.gooseai.TransformWarp3d|undefined} value
 * @return {!proto.gooseai.Transform} returns this
*/
proto.gooseai.Transform.prototype.setWarp3d = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.gooseai.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Transform} returns this
 */
proto.gooseai.Transform.prototype.clearWarp3d = function() {
  return this.setWarp3d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Transform.prototype.hasWarp3d = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TransformWarpFlow warp_flow = 5;
 * @return {?proto.gooseai.TransformWarpFlow}
 */
proto.gooseai.Transform.prototype.getWarpFlow = function() {
  return /** @type{?proto.gooseai.TransformWarpFlow} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.TransformWarpFlow, 5));
};


/**
 * @param {?proto.gooseai.TransformWarpFlow|undefined} value
 * @return {!proto.gooseai.Transform} returns this
*/
proto.gooseai.Transform.prototype.setWarpFlow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.gooseai.Transform.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Transform} returns this
 */
proto.gooseai.Transform.prototype.clearWarpFlow = function() {
  return this.setWarpFlow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Transform.prototype.hasWarpFlow = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gooseai.Request.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    image: (f = msg.getImage()) && proto.gooseai.ImageReference.toObject(includeInstance, f),
    transformsList: jspb.Message.toObjectList(msg.getTransformsList(),
    proto.gooseai.Transform.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.Request}
 */
proto.gooseai.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.Request;
  return proto.gooseai.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.Request}
 */
proto.gooseai.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.gooseai.ImageReference;
      reader.readMessage(value,proto.gooseai.ImageReference.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 3:
      var value = new proto.gooseai.Transform;
      reader.readMessage(value,proto.gooseai.Transform.deserializeBinaryFromReader);
      msg.addTransforms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gooseai.ImageReference.serializeBinaryToWriter
    );
  }
  f = message.getTransformsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.gooseai.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.gooseai.Request.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gooseai.Request} returns this
 */
proto.gooseai.Request.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ImageReference image = 2;
 * @return {?proto.gooseai.ImageReference}
 */
proto.gooseai.Request.prototype.getImage = function() {
  return /** @type{?proto.gooseai.ImageReference} */ (
    jspb.Message.getWrapperField(this, proto.gooseai.ImageReference, 2));
};


/**
 * @param {?proto.gooseai.ImageReference|undefined} value
 * @return {!proto.gooseai.Request} returns this
*/
proto.gooseai.Request.prototype.setImage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gooseai.Request} returns this
 */
proto.gooseai.Request.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Request.prototype.hasImage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Transform transforms = 3;
 * @return {!Array<!proto.gooseai.Transform>}
 */
proto.gooseai.Request.prototype.getTransformsList = function() {
  return /** @type{!Array<!proto.gooseai.Transform>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gooseai.Transform, 3));
};


/**
 * @param {!Array<!proto.gooseai.Transform>} value
 * @return {!proto.gooseai.Request} returns this
*/
proto.gooseai.Request.prototype.setTransformsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.gooseai.Transform=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gooseai.Transform}
 */
proto.gooseai.Request.prototype.addTransforms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.gooseai.Transform, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gooseai.Request} returns this
 */
proto.gooseai.Request.prototype.clearTransformsList = function() {
  return this.setTransformsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gooseai.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.gooseai.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gooseai.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    image: msg.getImage_asB64(),
    mask: msg.getMask_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gooseai.Result}
 */
proto.gooseai.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gooseai.Result;
  return proto.gooseai.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gooseai.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gooseai.Result}
 */
proto.gooseai.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gooseai.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gooseai.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gooseai.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gooseai.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes image = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gooseai.Result.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes image = 1;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.gooseai.Result.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.gooseai.Result.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gooseai.Result} returns this
 */
proto.gooseai.Result.prototype.setImage = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes mask = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gooseai.Result.prototype.getMask = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes mask = 2;
 * This is a type-conversion wrapper around `getMask()`
 * @return {string}
 */
proto.gooseai.Result.prototype.getMask_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMask()));
};


/**
 * optional bytes mask = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMask()`
 * @return {!Uint8Array}
 */
proto.gooseai.Result.prototype.getMask_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMask()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gooseai.Result} returns this
 */
proto.gooseai.Result.prototype.setMask = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gooseai.Result} returns this
 */
proto.gooseai.Result.prototype.clearMask = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gooseai.Result.prototype.hasMask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.gooseai.BorderMode = {
  BORDER_REFLECT: 0,
  BORDER_REPLICATE: 1,
  BORDER_WRAP: 2,
  BORDER_ZERO: 3
};

/**
 * @enum {number}
 */
proto.gooseai.ColorMatchMode = {
  COLOR_MATCH_NONE: 0,
  COLOR_MATCH_HSV: 1,
  COLOR_MATCH_LAB: 2,
  COLOR_MATCH_RGB: 3
};

/**
 * @enum {number}
 */
proto.gooseai.SamplingMode = {
  SAMPLING_BICUBIC: 0,
  SAMPLING_BILINEAR: 1,
  SAMPLING_NEAREST: 2
};

goog.object.extend(exports, proto.gooseai);
