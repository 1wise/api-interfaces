// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransformServiceClient is the client API for TransformService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransformServiceClient interface {
	Transform(ctx context.Context, in *Request, opts ...grpc.CallOption) (TransformService_TransformClient, error)
}

type transformServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformServiceClient(cc grpc.ClientConnInterface) TransformServiceClient {
	return &transformServiceClient{cc}
}

func (c *transformServiceClient) Transform(ctx context.Context, in *Request, opts ...grpc.CallOption) (TransformService_TransformClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransformService_ServiceDesc.Streams[0], "/gooseai.TransformService/Transform", opts...)
	if err != nil {
		return nil, err
	}
	x := &transformServiceTransformClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransformService_TransformClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type transformServiceTransformClient struct {
	grpc.ClientStream
}

func (x *transformServiceTransformClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransformServiceServer is the server API for TransformService service.
// All implementations must embed UnimplementedTransformServiceServer
// for forward compatibility
type TransformServiceServer interface {
	Transform(*Request, TransformService_TransformServer) error
	mustEmbedUnimplementedTransformServiceServer()
}

// UnimplementedTransformServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransformServiceServer struct {
}

func (UnimplementedTransformServiceServer) Transform(*Request, TransformService_TransformServer) error {
	return status.Errorf(codes.Unimplemented, "method Transform not implemented")
}
func (UnimplementedTransformServiceServer) mustEmbedUnimplementedTransformServiceServer() {}

// UnsafeTransformServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformServiceServer will
// result in compilation errors.
type UnsafeTransformServiceServer interface {
	mustEmbedUnimplementedTransformServiceServer()
}

func RegisterTransformServiceServer(s grpc.ServiceRegistrar, srv TransformServiceServer) {
	s.RegisterService(&TransformService_ServiceDesc, srv)
}

func _TransformService_Transform_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransformServiceServer).Transform(m, &transformServiceTransformServer{stream})
}

type TransformService_TransformServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type transformServiceTransformServer struct {
	grpc.ServerStream
}

func (x *transformServiceTransformServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

// TransformService_ServiceDesc is the grpc.ServiceDesc for TransformService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransformService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gooseai.TransformService",
	HandlerType: (*TransformServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transform",
			Handler:       _TransformService_Transform_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transform.proto",
}
