# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transform.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0ftransform.proto\x12\x07gooseai\">\n\x0eImageReference\x12\x12\n\x08\x61sset_id\x18\x01 \x01(\tH\x00\x12\x0f\n\x05\x62ytes\x18\x02 \x01(\x0cH\x00\x42\x07\n\x05image\"j\n\x13TransformColorMatch\x12+\n\ncolor_mode\x18\x01 \x01(\x0e\x32\x17.gooseai.ColorMatchMode\x12&\n\x05image\x18\x02 \x01(\x0b\x32\x17.gooseai.ImageReference\" \n\x0eTransformNoise\x12\x0e\n\x06\x61mount\x18\x01 \x01(\x02\"\x84\x01\n\x0fTransformWarp2d\x12(\n\x0b\x62order_mode\x18\x01 \x01(\x0e\x32\x13.gooseai.BorderMode\x12\x0e\n\x06rotate\x18\x02 \x01(\x02\x12\r\n\x05scale\x18\x03 \x01(\x02\x12\x13\n\x0btranslate_x\x18\x04 \x01(\x02\x12\x13\n\x0btranslate_y\x18\x05 \x01(\x02\"\xa8\x02\n\x0fTransformWarp3d\x12(\n\x0b\x62order_mode\x18\x01 \x01(\x0e\x32\x13.gooseai.BorderMode\x12,\n\rsampling_mode\x18\x02 \x01(\x0e\x32\x15.gooseai.SamplingMode\x12\x13\n\x0btranslate_x\x18\x03 \x01(\x02\x12\x13\n\x0btranslate_y\x18\x04 \x01(\x02\x12\x13\n\x0btranslate_z\x18\x05 \x01(\x02\x12\x10\n\x08rotate_x\x18\x06 \x01(\x02\x12\x10\n\x08rotate_y\x18\x07 \x01(\x02\x12\x10\n\x08rotate_z\x18\x08 \x01(\x02\x12\x12\n\nnear_plane\x18\t \x01(\x02\x12\x11\n\tfar_plane\x18\n \x01(\x02\x12\x0b\n\x03\x66ov\x18\x0b \x01(\x02\x12\x14\n\x0cmidas_weight\x18\x0c \x01(\x02\">\n\x11TransformWarpFlow\x12)\n\x08\x66low_map\x18\x01 \x01(\x0b\x32\x17.gooseai.ImageReference\"\xfc\x01\n\tTransform\x12\x33\n\x0b\x63olor_match\x18\x01 \x01(\x0b\x32\x1c.gooseai.TransformColorMatchH\x00\x12(\n\x05noise\x18\x02 \x01(\x0b\x32\x17.gooseai.TransformNoiseH\x00\x12*\n\x06warp2d\x18\x03 \x01(\x0b\x32\x18.gooseai.TransformWarp2dH\x00\x12*\n\x06warp3d\x18\x04 \x01(\x0b\x32\x18.gooseai.TransformWarp3dH\x00\x12/\n\twarp_flow\x18\x05 \x01(\x0b\x32\x1a.gooseai.TransformWarpFlowH\x00\x42\x07\n\x05xform\"m\n\x07Request\x12\x12\n\nrequest_id\x18\x01 \x01(\t\x12&\n\x05image\x18\x02 \x01(\x0b\x32\x17.gooseai.ImageReference\x12&\n\ntransforms\x18\x03 \x03(\x0b\x32\x12.gooseai.Transform\"3\n\x06Result\x12\r\n\x05image\x18\x01 \x01(\x0c\x12\x11\n\x04mask\x18\x02 \x01(\x0cH\x00\x88\x01\x01\x42\x07\n\x05_mask*X\n\nBorderMode\x12\x12\n\x0e\x42ORDER_REFLECT\x10\x00\x12\x14\n\x10\x42ORDER_REPLICATE\x10\x01\x12\x0f\n\x0b\x42ORDER_WRAP\x10\x02\x12\x0f\n\x0b\x42ORDER_ZERO\x10\x03*e\n\x0e\x43olorMatchMode\x12\x14\n\x10\x43OLOR_MATCH_NONE\x10\x00\x12\x13\n\x0f\x43OLOR_MATCH_HSV\x10\x01\x12\x13\n\x0f\x43OLOR_MATCH_LAB\x10\x02\x12\x13\n\x0f\x43OLOR_MATCH_RGB\x10\x03*Q\n\x0cSamplingMode\x12\x14\n\x10SAMPLING_BICUBIC\x10\x00\x12\x15\n\x11SAMPLING_BILINEAR\x10\x01\x12\x14\n\x10SAMPLING_NEAREST\x10\x02\x32\x46\n\x10TransformService\x12\x32\n\tTransform\x12\x10.gooseai.Request\x1a\x0f.gooseai.Result\"\x00\x30\x01\x42\x0eZ\x0c./;transformb\x06proto3')

_BORDERMODE = DESCRIPTOR.enum_types_by_name['BorderMode']
BorderMode = enum_type_wrapper.EnumTypeWrapper(_BORDERMODE)
_COLORMATCHMODE = DESCRIPTOR.enum_types_by_name['ColorMatchMode']
ColorMatchMode = enum_type_wrapper.EnumTypeWrapper(_COLORMATCHMODE)
_SAMPLINGMODE = DESCRIPTOR.enum_types_by_name['SamplingMode']
SamplingMode = enum_type_wrapper.EnumTypeWrapper(_SAMPLINGMODE)
BORDER_REFLECT = 0
BORDER_REPLICATE = 1
BORDER_WRAP = 2
BORDER_ZERO = 3
COLOR_MATCH_NONE = 0
COLOR_MATCH_HSV = 1
COLOR_MATCH_LAB = 2
COLOR_MATCH_RGB = 3
SAMPLING_BICUBIC = 0
SAMPLING_BILINEAR = 1
SAMPLING_NEAREST = 2


_IMAGEREFERENCE = DESCRIPTOR.message_types_by_name['ImageReference']
_TRANSFORMCOLORMATCH = DESCRIPTOR.message_types_by_name['TransformColorMatch']
_TRANSFORMNOISE = DESCRIPTOR.message_types_by_name['TransformNoise']
_TRANSFORMWARP2D = DESCRIPTOR.message_types_by_name['TransformWarp2d']
_TRANSFORMWARP3D = DESCRIPTOR.message_types_by_name['TransformWarp3d']
_TRANSFORMWARPFLOW = DESCRIPTOR.message_types_by_name['TransformWarpFlow']
_TRANSFORM = DESCRIPTOR.message_types_by_name['Transform']
_REQUEST = DESCRIPTOR.message_types_by_name['Request']
_RESULT = DESCRIPTOR.message_types_by_name['Result']
ImageReference = _reflection.GeneratedProtocolMessageType('ImageReference', (_message.Message,), {
  'DESCRIPTOR' : _IMAGEREFERENCE,
  '__module__' : 'transform_pb2'
  # @@protoc_insertion_point(class_scope:gooseai.ImageReference)
  })
_sym_db.RegisterMessage(ImageReference)

TransformColorMatch = _reflection.GeneratedProtocolMessageType('TransformColorMatch', (_message.Message,), {
  'DESCRIPTOR' : _TRANSFORMCOLORMATCH,
  '__module__' : 'transform_pb2'
  # @@protoc_insertion_point(class_scope:gooseai.TransformColorMatch)
  })
_sym_db.RegisterMessage(TransformColorMatch)

TransformNoise = _reflection.GeneratedProtocolMessageType('TransformNoise', (_message.Message,), {
  'DESCRIPTOR' : _TRANSFORMNOISE,
  '__module__' : 'transform_pb2'
  # @@protoc_insertion_point(class_scope:gooseai.TransformNoise)
  })
_sym_db.RegisterMessage(TransformNoise)

TransformWarp2d = _reflection.GeneratedProtocolMessageType('TransformWarp2d', (_message.Message,), {
  'DESCRIPTOR' : _TRANSFORMWARP2D,
  '__module__' : 'transform_pb2'
  # @@protoc_insertion_point(class_scope:gooseai.TransformWarp2d)
  })
_sym_db.RegisterMessage(TransformWarp2d)

TransformWarp3d = _reflection.GeneratedProtocolMessageType('TransformWarp3d', (_message.Message,), {
  'DESCRIPTOR' : _TRANSFORMWARP3D,
  '__module__' : 'transform_pb2'
  # @@protoc_insertion_point(class_scope:gooseai.TransformWarp3d)
  })
_sym_db.RegisterMessage(TransformWarp3d)

TransformWarpFlow = _reflection.GeneratedProtocolMessageType('TransformWarpFlow', (_message.Message,), {
  'DESCRIPTOR' : _TRANSFORMWARPFLOW,
  '__module__' : 'transform_pb2'
  # @@protoc_insertion_point(class_scope:gooseai.TransformWarpFlow)
  })
_sym_db.RegisterMessage(TransformWarpFlow)

Transform = _reflection.GeneratedProtocolMessageType('Transform', (_message.Message,), {
  'DESCRIPTOR' : _TRANSFORM,
  '__module__' : 'transform_pb2'
  # @@protoc_insertion_point(class_scope:gooseai.Transform)
  })
_sym_db.RegisterMessage(Transform)

Request = _reflection.GeneratedProtocolMessageType('Request', (_message.Message,), {
  'DESCRIPTOR' : _REQUEST,
  '__module__' : 'transform_pb2'
  # @@protoc_insertion_point(class_scope:gooseai.Request)
  })
_sym_db.RegisterMessage(Request)

Result = _reflection.GeneratedProtocolMessageType('Result', (_message.Message,), {
  'DESCRIPTOR' : _RESULT,
  '__module__' : 'transform_pb2'
  # @@protoc_insertion_point(class_scope:gooseai.Result)
  })
_sym_db.RegisterMessage(Result)

_TRANSFORMSERVICE = DESCRIPTOR.services_by_name['TransformService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z\014./;transform'
  _BORDERMODE._serialized_start=1151
  _BORDERMODE._serialized_end=1239
  _COLORMATCHMODE._serialized_start=1241
  _COLORMATCHMODE._serialized_end=1342
  _SAMPLINGMODE._serialized_start=1344
  _SAMPLINGMODE._serialized_end=1425
  _IMAGEREFERENCE._serialized_start=28
  _IMAGEREFERENCE._serialized_end=90
  _TRANSFORMCOLORMATCH._serialized_start=92
  _TRANSFORMCOLORMATCH._serialized_end=198
  _TRANSFORMNOISE._serialized_start=200
  _TRANSFORMNOISE._serialized_end=232
  _TRANSFORMWARP2D._serialized_start=235
  _TRANSFORMWARP2D._serialized_end=367
  _TRANSFORMWARP3D._serialized_start=370
  _TRANSFORMWARP3D._serialized_end=666
  _TRANSFORMWARPFLOW._serialized_start=668
  _TRANSFORMWARPFLOW._serialized_end=730
  _TRANSFORM._serialized_start=733
  _TRANSFORM._serialized_end=985
  _REQUEST._serialized_start=987
  _REQUEST._serialized_end=1096
  _RESULT._serialized_start=1098
  _RESULT._serialized_end=1149
  _TRANSFORMSERVICE._serialized_start=1427
  _TRANSFORMSERVICE._serialized_end=1497
# @@protoc_insertion_point(module_scope)
